syntax = "proto3";

package proto;
option go_package = "./proto";   // ajusta si cambias la ruta del módulo

/* ========== Servicio principal ========== */
service RaftService {
  /* --- sistema de archivos --- */
  rpc TransferFile (FileData)        returns (GenericResponse);
  rpc DeleteFile   (DeleteRequest)   returns (GenericResponse);
  rpc MkDir        (MkDirRequest)    returns (GenericResponse);
  rpc RemoveDir    (RemoveDirRequest)returns (GenericResponse);
  rpc ListDir      (DirRequest)      returns (DirReply);

  /* --- RPC Raft estándar --- */
  rpc RequestVote     (VoteRequest)      returns (VoteResponse);
  rpc AppendEntries   (AppendRequest)    returns (AppendResponse);
  rpc InstallSnapshot (stream SnapshotChunk) returns (SnapshotAck);
  rpc JoinCluster     (JoinRequest)      returns (JoinResponse);
}

/* ========== Mensajes Raft (sin cambios) ========== */
message VoteRequest   { int64 term = 1; int64 candidateId = 2; int64 lastLogIndex = 3; int64 lastLogTerm = 4; }
message VoteResponse  { int64 term = 1; bool  voteGranted = 2; }

message LogEntry      { int64 term = 1; bytes command = 2; }  // index implícito por posición
message AppendRequest { int64 term = 1; int64 leaderId = 2; int64 prevLogIndex = 3; int64 prevLogTerm = 4;
                        repeated LogEntry entries = 5; int64 leaderCommit = 6; }
message AppendResponse{ int64 term = 1; bool  success = 2; }

message SnapshotChunk { bytes data = 1; int64 chunk_index = 2; bool is_last = 3;
                        int64 term = 4; int64 leader_id = 5;
                        int64 last_included_index = 6; int64 last_included_term = 7; }
message SnapshotAck   { bool  success = 1; int64 term = 2; }

message JoinRequest   { int64 node_id = 1; string address = 2; int64 last_index = 3; }
message JoinResponse  { bool  success = 1; string message = 2; }

/* ========== Sistema de archivos RPC ========== */

/* 1️⃣  Archivo binario */
message FileData { string filename = 1; bytes content = 2; }

/* 2️⃣  Borrar archivo */
message DeleteRequest { string filename = 1; }

/* 3️⃣  Crear / eliminar directorio */
message MkDirRequest     { string dirname = 1; }   // mkdir -p
message RemoveDirRequest { string dirname = 1; }   // rm -r

/* 4️⃣  Listar directorio */
message DirRequest { string path = 1; }            // "" o "/" = raíz
message DirReply   { repeated string names = 1; }  // list of files/dirs

/* 5️⃣  Respuesta genérica */
message GenericResponse { bool success = 1; string message = 2; }

/* ========== Comando que se replica en el log ========== */
message FileCommand {
  enum Operation {
    TRANSFER = 0;  // FileData
    DELETE   = 1;  // DeleteRequest
    MKDIR    = 2;  // MkDirRequest
    RMDIR    = 3;  // RemoveDirRequest
  }
  Operation op   = 1;
  string    path = 2;   // ruta absoluta (dentro del FS base)
  bytes     content = 3; // sólo para TRANSFER
}
